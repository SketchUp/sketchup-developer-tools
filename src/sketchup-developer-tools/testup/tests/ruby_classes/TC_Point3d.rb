# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Point3d object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Point3d contains unit tests for the Point3d class.
#
# API Object::       Point3d
# C++ File::         rpoint3d.cpp
# Parent Class::     Object
# Version::          SketchUp 6.0
#
# The Point3d class allows you to work with a point in 3d space.
# The point is basically just a series of values representing x, y and z
# coordinates.
#
# The values are specified as [x,y,z]. For example [100,200,300].
# To create a point call Geom::Point3d.new, where the creation method
# can take a variety of arguments:
class TC_Point3d < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.on_plane?
  # @file                rpoint3d.cpp
  #
  # The on_plane? method is used to determine if the point is on a plane.
  #
  # See module Geom for the various ways to specify a plane.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the point is on the plane; false if
  # the point is not on the plane
  #

  # Test the example code that we have in the API documentation.
  def test_on_plane_api_example
    status = nil
    assert_nothing_raised do
     plane = [Geom::Point3d.new(0,0,0), Geom::Vector3d.new(0,0,1)]
     point = Geom::Point3d.new 10,10,10
     status = point.on_plane? plane
    end
    assert_equal(false, status,
                 'Failed in test_on_plane_api_example' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.-
  # @file                rpoint3d.cpp
  #
  # The '-' operator is a fast way to subtract from the current x, y and z
  # values of a point.
  #
  #
  # Args:
  # - point2: A Point3d object.
  #
  # Returns:
  # - vector: a Vector object
  #

  # Test the example code that we have in the API documentation.
  def test_minus_api_example
    assert_nothing_raised do
     pt = Geom::Point3d.new(0,0,0)
     vec = Geom::Vector3d.new(0,0,1)
     pt2 = pt - vec
     pt = pt - [10,10,10]
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.x=
  # @file                rpoint3d.cpp
  #
  # The x= method is used to set the x value of a 3d point.
  #
  #
  # Args:
  # - value: The new x value.
  #
  # Returns:
  # - x: the newly set x value
  #

  # Test the example code that we have in the API documentation.
  def test_set_x_api_example
    x = nil
    assert_nothing_raised do
     point = Geom::Point3d.new 1,2,3
     x = point.x=2
    end
    assert_equal(2, x,
                 'Failed in test_set_x_api_example' )
  end


  # Test that the x= method successfully sets a float value.
  def test_set_x_as_float
    obj = Geom::Point3d.new
    obj.x = 1000.0
    result = obj.x
    expected = 1000.0
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # Test that the x= method successfully sets a fixnum value.
  def test_set_x_as_fixnum
    obj = Geom::Point3d.new
    obj.x = 1000
    result = obj.x
    expected = 1000
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.x
  # @file                rpoint3d.cpp
  #
  # The x method retrieves the x value of the 3d point.
  #
  #
  # Args:
  #
  # Returns:
  # - x: the new x value
  #

  # Test the example code that we have in the API documentation.
  def test_x_api_example
    x = nil
    assert_nothing_raised do
     point = Geom::Point3d.new 1,2,3
     x = point.x
    end
    assert_equal(1, x,
                 'Failed in test_x_api_example' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.y
  # @file                rpoint3d.cpp
  #
  # The y method retrieves the y value of the 3d point.
  #
  #
  # Args:
  #
  # Returns:
  # - y: the new y value
  #

  # Test the example code that we have in the API documentation.
  def test_y_api_example
    y = nil
    assert_nothing_raised do
     point = Geom::Point3d.new 1,2,3
     y = point.y
    end
    assert_equal(2, y,
                 'Failed in test_y' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.transform
  # @file                rpoint3d.cpp
  #
  # The transform! method is used to apply a Transformation to a point to
  # create a new point.
  #
  #
  # Args:
  # - transform: A Transformation object.
  #
  # Returns:
  # - transformed_point: the new point
  #

  # Test the example code that we have in the API documentation.
  def test_transform_api_example
    
    assert_nothing_raised do
     point2 = Geom::Point3d.new 100,200,300
     transform = Geom::Transformation.new(point2)
     point1 = Geom::Point3d.new 10,10,10
     point3 = point1.transform transform
    end

  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.transform!
  # @file                rpoint3d.cpp
  #
  # The transform! method is used to apply a Transformation to a point.
  #
  # Unlike the transform method, the point itself is modified.
  #
  #
  # Args:
  # - transform: A Transformation object.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_transform_inplace_api_example
    assert_nothing_raised do
     
     point2 = Geom::Point3d.new 100,200,300
     transform = Geom::Transformation.new(point2)
     point1 = Geom::Point3d.new 10,10,10
     point1.transform! transform
    end

  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.z
  # @file                rpoint3d.cpp
  #
  # The z method retrieves the z value of the 3d point.
  #
  #
  # Args:
  #
  # Returns:
  # - z: the z value
  #

  # Test the example code that we have in the API documentation.
  def test_z_api_example
    z = nil
    assert_nothing_raised do
     point = Geom::Point3d.new 1,2,3
     z = point.z
    end
    assert_equal(3, z,
                 'Failed in test_z_api_example' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.linear_combination
  # @file                rpoint3d.cpp
  #
  # The linear_combination method is used to create a new point as a
  # linear combination of two points. This method is generally used to get
  # a point at some percentage along a line connecting the two points.
  #
  # A linear combination is a standard term for vector math. It is
  # defined as point = weight1 * point1 + weight2 * point2.
  #
  #
  # Args:
  # - weight1: A weight or percentage.
  # - point1: The start point on the line.
  # - weight2: A weight or percentage.
  # - point2: The end point of the line.
  #
  # Returns:
  # - point: a Point3d object
  #

  # Test the example code that we have in the API documentation.
  def test_linear_combination_api_example
    
    assert_nothing_raised do
     point1 = Geom::Point3d.new 1,1,1
     point2 = Geom::Point3d.new 10,10,10
     # Gets the point on the line segment connecting point1 and point2 that is
     # 3/4 the way from point1 to point2.
     point = Geom::Point3d.linear_combination 0.25, point1, 0.75, point2
     if (point)
       UI.messagebox point
     else
       UI.messagebox "Failure"
     end
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.distance_to_plane
  # @file                rpoint3d.cpp
  #
  # The distance_to_plane method is used to compute the distance from the
  # point to a plane.
  #
  # See module Geom for how to specify a plane.
  #
  #
  # Args:
  # - plane: A plane (see Geom for how to create a plane).
  #
  # Returns:
  # - distance: a distance between a point and a plane in
  # current units if successful
  #


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.vector_to
  # @file                rpoint3d.cpp
  #
  # The vector_to team method retrieves the vector between points.
  #
  #
  # Args:
  # - point2: A Point3d object.
  #
  # Returns:
  # - vector: a Vector object
  #

  # Test the example code that we have in the API documentation.
  def test_vector_to_api_example
    assert_nothing_raised do
     point2 = Geom::Point3d.new 100,200,300
     point1 = Geom::Point3d.new 10,10,10
     vector = point1.vector_to point2

     # Another example...
     pt1 = [1,1,0]
     pt2 = [3,1,0]
     pt1.vector_to( pt2 ) # returns the vector (2,0,0)
     pt1.vector_to(pt2) # is equivalent to (pt2 - pt1)
    end

  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.[]=
  # @file                rpoint3d.cpp
  #
  # The []= method is used to set the x, y, or z value of the point based
  # on the specific index of the value.
  #
  #
  # Args:
  # - new_value: New x, y, or z value.
  #
  # Returns:
  # - status: the newly set x, y, or z value if successful
  #

  # Test the example code that we have in the API documentation.
  def test_arrayset_api_example
    assert_nothing_raised do
     point = Geom::Point3d.new 1,2,3
     yvalue = point[1] = 4
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.to_a
  # @file                rpoint3d.cpp
  #
  # The to_a method is used to convert the point to an array of 3 numbers
  #
  #
  # Args:
  #
  # Returns:
  # - array: an array of three numbers representing x,y,z of
  # the Point3d
  #

  # Test the example code that we have in the API documentation.
  def test_to_a_api_example
    assert_nothing_raised do
     point = Geom::Point3d.new 10,20,30
     array = point.to_a

     pt = [100,200,300]
     # outputs [100.0,200.0,300.0]
     UI.messagebox(pt.to_a)
    end
  end

  # Test that the entities method returns an Array object.
  def test_to_a_returns_array
    obj = Geom::Point3d.new
    a = obj.to_a
    result = a.class
    expected = Array
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.<
  # @file                rpoint3d.cpp
  #
  # The '<' operator is a fast way to determine if another point is closer
  # to the origin.
  #
  #
  # Args:
  # - point2: A Point3d object.
  #
  # Returns:
  # - : true if the point2 is closer to the origin.
  #

  # Test the example code that we have in the API documentation.
  def test_lessthan_api_example
    result = nil
    assert_nothing_raised do
     pt1 = Geom::Point3d.new(10,10,10)
     pt2 = Geom::Point3d.new(20,20,20)
     result = pt1 < pt2
    end
    assert_equal(true, result,
                 'Failed in test_lessthan' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.project_to_plane
  # @file                rpoint3d.cpp
  #
  # The project_to_plane method is used to retrieve the point on a plane
  # that is closest to the point.
  #
  # The plane may be defined by either a point on the plane and a vector
  # perpendicular to the plane or by the coeficients to the plane equation
  # AX + BY + CZ + D = 0. See Geom for details.
  #
  #
  # Args:
  # - plane: A plane (see Geom for how to create a plane).
  #
  # Returns:
  # - point: the Point3d that is on a plane closest to the
  # point
  #

  # Test the example code that we have in the API documentation.
  def test_project_to_plane_api_example
    assert_nothing_raised do
     plane = [Geom::Point3d.new(0,0,0), Geom::Vector3d.new(0,0,1)]
     point = Geom::Point3d.new 10,10,10
     projected_point = point.project_to_plane plane
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.offset
  # @file                rpoint3d.cpp
  #
  # The offset method is used to offset a point by a vector and return a
  # new point. The length of the vector must not be zero.
  #
  #
  # Args:
  # - vector: A Vector3d object to offset the point by.
  # - length: (optional) the distance to offset. If not provided, the
  # offset is my a distance equal to the vector length.
  #
  # Returns:
  # - point2: a new Point3d object
  #

  # Test the example code that we have in the API documentation.
  def test_offset_api_example
    assert_nothing_raised do
     point1 = Geom::Point3d.new 10,10,10
     vector = Geom::Vector3d.new(0,0,1)
     point2 = point1.offset vector
    end
  end
#--------------------------------------------------------------------------

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.distance_to_line
  # @file                rpoint3d.cpp
  #
  # The distance_to_line method is used to compute the distance from a
  # point to a line.
  #
  # See Geom module for how to specify a line.
  #
  #
  # Args:
  # - line: A line (see Geom for information on creating lines).
  #
  # Returns:
  # - distance: the distance between a point and line in
  # current units if successful
  #


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.project_to_line
  # @file                rpoint3d.cpp
  #
  # The project_to_line method is used to retrieve the point on a line
  # that is closest to this point.
  #
  # The line may be defined by either a point and a vector or by two
  # points.
  #
  #
  # Args:
  # - line: - see Geom for how to specigy a line
  #
  # Returns:
  # - point: the Point3d that is on a line closest to the
  # point
  #

  # Test the example code that we have in the API documentation.
  def test_project_to_line_api_example
    assert_nothing_raised do
     line = [Geom::Point3d.new(0,0,0), Geom::Vector3d.new(0,0,1)]
     point = Geom::Point3d.new 10,10,10
     projected_point = point.project_to_line line
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.offset!
  # @file                rpoint3d.cpp
  #
  # The offset! method is used to offset a point by a vector. The point
  # itself is modified.
  #
  # Unlike offset, the point itself is modified.
  #
  #
  # Args:
  # - vector: A Vector3d object to offset the point by.
  #
  # Returns:
  # - point2: a new Point3d object
  #

  # Test the example code that we have in the API documentation.
  def test_offset_inplace_api_example
    assert_nothing_raised do
     point1 = Geom::Point3d.new 10,10,10
     vector = Geom::Vector3d.new(0,0,1)
     point2 = point1.offset! vector
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.on_line?
  # @file                rpoint3d.cpp
  #
  # The on_line? method is used to determine if the point is on a line.
  #
  # See module Geom for the various ways to specify a line.
  #
  #
  # Args:
  # - line: A line (see Geom for how to create a line).
  #
  # Returns:
  # - status: true if the point is on the line; false if the
  # point is not on the line
  #

  # Test the example code that we have in the API documentation.
  def test_on_line_api_example
    status = nil
    assert_nothing_raised do
     line = [Geom::Point3d.new(0,0,0), Geom::Vector3d.new(0,0,1)]
     point = Geom::Point3d.new 10,10,10
     status = point.on_line? line
    end
    assert_equal(false, status,
                 'Failed in test_on_line_api_example' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.distance
  # @file                rpoint3d.cpp
  #
  # The distance method is used to compute the distance from a point to
  # another point.
  #
  #
  # Args:
  # - point2: The Point3d object to compute the distance to.
  #
  # Returns:
  # - distance: the distance in current units
  #

  # Test the example code that we have in the API documentation.
  def test_distance_api_example
    assert_nothing_raised do
     point1 = Geom::Point3d.new 1,1,1
     point2 = Geom::Point3d.new 10,10,10
     distance = point1.distance point2
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.==
  # @file                rpoint3d.cpp
  #
  #
  #
  # Args:
  # - point1: A Point3d object.
  # - point2: A Point3d object.
  #
  # Returns:
  # - status: true if both points are equal; false if points
  # are not equal
  #

  # Test the example code that we have in the API documentation.
  def test_equals_api_example
    status = nil
    assert_nothing_raised do
     point1 = Geom::Point3d.new 1,1,1
     point2 = Geom::Point3d.new 10,10,10
     status = point1 == point2
    end
    assert_equal(false, status,
                 'Failed in test_equals' )
  end
#--------------------------------------------------------------


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.inspect
  # @file                rpoint3d.cpp
  #
  # The inspect method is used to format a 3d point as a string.
  #
  # You will not often use these function directly. Instead, they are
  # called automatically when an object is output using a print command
  # like 'puts', which writes to the Ruby console.
  #
  #
  # Args:
  #
  # Returns:
  # - point: a string point representation
  #

  # Test the example code that we have in the API documentation.
  def test_inspect_api_example
    string = ''
    assert_nothing_raised do
     point = Geom::Point3d.new 10,10,10
     string = point.inspect
    end
    assert_equal('Point3d(10, 10, 10)', string,
                 'Failed in test_inspect_api_example' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.+
  # @file                rpoint3d.cpp
  #
  # The '+' operator is a fast way to add to the current x, y and z values
  # of a point, or to set the values of a point by adding to other points
  # together.
  #
  #
  # Args:
  # - point2: A Point3d object.
  #
  # Returns:
  # - vector: a Vector object
  #



  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.[]
  # @file                rpoint3d.cpp
  #
  # The [] method is used to retrieve the value of the point at the
  # specified index.
  #
  #
  # Args:
  # - index: The index for a specific x, y, or z value within the Point3d.
  #
  # Returns:
  # - value: an x, y, or z value if successful
  #

  # Test the example code that we have in the API documentation.
  def test_arrayget_api_example
    assert_nothing_raised do
     point = Geom::Point3d.new 1, 2, 3

     # retrieves the y value of 2
     yvalue = point[1]
    end
  end


  # Test that if there is a negative index requested, the elements are taken
  # starting from the end of the array going towards the front, so -1 returns
  # the last array element, -2 the second to last, etc.
  def test_arrayget_on_negative_index
    collection = Geom::Point3d.new(1,2,3)
    expected = 3
    result = collection[-1]
    assert_equal(expected, result,
                 'Expected does not match result.')
  end

  # Test that an IndexError exception is raised if there is a non-existent
  # index requested. We use the length of the collection as our non-existent
  # index.
  def test_arrayget_raise_on_nonexistent_index
    collection = Geom::Point3d.new(1,2,3)
    assert_raise IndexError do
      result = collection[3]
    end

  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.new
  # @file                rpoint3d.cpp
  #
  # The new method is used to create a new 3d point.
  #
  # With no arguments, this creates a point at the origin (0,0,0). With
  # two values, it creates a point at (x,y,0).
  #
  #
  # Args:
  # - x: The location along the x axis.
  # - y: The location along the y axis.
  # - z: The location along the z axis.
  #
  # Returns:
  # - point: the newly created Point3d object
  #

  # Test the example code that we have in the API documentation.
  def test_new_api_example
    assert_nothing_raised do
     # No arguments, creates a point at the origin [0,0,0]
     pt1 = Geom::Point3d.new

     # Creates a point at x of 100, y of 200, z of 300.
     pt2 = Geom::Point3d.new(100,200,300)

     # You can also create a point directly by simply assigning the x, y and z
     # values to a variable as an array:
     pt3 = [100,200,300]
    end
  end
#-----------------------------------------------------------------


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.z=
  # @file                rpoint3d.cpp
  #
  # The y= method is used to set the z value of a 3d point.
  #
  #
  # Args:
  # - value: The new z value.
  #
  # Returns:
  # - z: the newly set z value
  #

  # Test the example code that we have in the API documentation.
  def test_set_z_api_example
    assert_nothing_raised do
     point = Geom::Point3d.new 1,2,3
     z = point.z=2
    end
  end

  # Test that the z= method successfully sets a float value.
  def test_set_z_as_float
    obj = Geom::Point3d.new
    obj.z = 1000.0
    result = obj.z
    expected = 1000.0
    assert_equal(expected, result, 'expected does not match result.')
  end

  # Test that the z= method successfully sets a fiznum value.
  def test_set_z_as_fixnum
    obj = Geom::Point3d.new
    obj.z = 1000
    result = obj.z
    expected = 1000
    assert_equal(expected, result, 'expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.clone
  # @file                rpoint3d.cpp
  #
  # The clone method is used to create another point identical to the
  # point being cloned.
  #
  #
  # Args:
  #
  # Returns:
  # - point2: the cloned Point3d object
  #

  # Test the example code that we have in the API documentation.
  def test_clone_api_example
    assert_nothing_raised do
     point = Geom::Point3d.new 1,2,3
     newpoint = point.clone
    end
  end


#----------------------------------------------------------------
  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.set
  # @file                rpoint3d.cpp
  #
  # The set! method is used to set the values of the Point3d.
  #
  #
  # Args:
  # - x: The location along the x axis .
  # - y: The location along the y axis.
  # - z: The location along the z axis.
  #
  # Returns:
  # - point: the newly created Point3d object
  #

  # Test the example code that we have in the API documentation.
  def test_set_api_example
    assert_nothing_raised do
     point = Geom::Point3d.new 10,10,10
     point = point.set! 100,200,300
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.y=
  # @file                rpoint3d.cpp
  #
  # The y= method is used to set the y value of a 3d point.
  #
  #
  # Args:
  # - value: The new y value.
  #
  # Returns:
  # - y: the newly set y value
  #

  # Test the example code that we have in the API documentation.
  def test_set_y_api_example
    
    assert_nothing_raised do
     point = Geom::Point3d.new 1,2,3
     y = point.y=2
    end
  end

  # Test that the y= method successfully sets a float value.
  def test_set_y_as_float
    obj = Geom::Point3d.new
    obj.y = 1000.0
    result = obj.y
    expected = 1000.0
    assert_equal(expected, result, 'expected does not match result.')
  end

  # Test that the y= method successfully sets a fiynum value.
  def test_set_y_as_fixnum
    obj = Geom::Point3d.new
    obj.y = 1000
    result = obj.y
    expected = 1000
    assert_equal(expected, result, 'expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Point3d.to_s
  # @file                rpoint3d.cpp
  #
  # The to_s method is used to retrieve a string representation of a
  # point.
  #
  #
  # Args:
  #
  # Returns:
  # - string: the string representation of the Point3d
  #

  # Test the example code that we have in the API documentation.
  def test_to_s_api_example
    assert_nothing_raised do
     point = Geom::Point3d.new 10,10,10
     str = point.to_s
    end
  end

end
