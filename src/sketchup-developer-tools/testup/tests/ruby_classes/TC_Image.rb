# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Image object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Image contains unit tests for the Image class.
#
# API Object::       Image
# C++ File::         rimage.cpp
# Parent Class::     Drawingelement
# Version::          SketchUp 6.0
#
# An Image object represents a raster image placed in the Model.
#
#
class TC_Image < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end

    entities_to_erase = []
    for entity in Sketchup.active_model.entities
      entities_to_erase.push entity
    end

    for entity in entities_to_erase
      if entity.valid?
        entity.erase!
      end
    end
  end

  def set_image(image_name)
    model = Sketchup.active_model
    path = Sketchup.find_support_file image_name, "Plugins" + 
      "/su_dynamiccomponents/images"
    pt = Geom::Point3d.new
    entities = model.active_entities
    return (entities.add_image path, pt, 300)
  end   
    

  # ----------------------------------------------------------------------------
  #
  # @par Ruby Method:    Image.width
  # @file                rimage.cpp
  #
  # The width method is used to retrieve the width of the image.
  #
  # The width is given in inches.
  #
  #
  # Args:
  #
  # Returns:
  # - width: the width of the image if successful
  #

  # Test the example code that we have in the API documentation.
  def test_width_api_example
    assert_nothing_raised do
     image = set_image "report_tool.png"
     width = image.width
     if (width)
       UI.messagebox width
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_width_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_width_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_width_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Image.size=
  # @file                rimage.cpp
  #
  # The size= method is used to set the width and height of the image.
  #
  #
  # Args:
  # - width: The width of the image.
  # - height: The height of the image.
  #
  # Returns:
  # - size: the new width and height of the image if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_set_size_api_example
    assert_nothing_raised do
     image = set_image "report_tool.png"
     UI.messagebox "Before Resize"
     size = image.size= 500,500
     if (size)
       UI.messagebox size
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_size_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_size_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_size_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Image.explode
  # @file                rimage.cpp
  #
  # The explode method is used to explode an image into a face with a
  # texture on it.
  #
  #
  # Args:
  #
  # Returns:
  # - entitiesarray: an Array object of entities if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_explode_api_example
    assert_nothing_raised do
     image = set_image "report_tool.png"
     entitiesarray = image.explode
     if (entitiesarray)
       UI.messagebox entitiesarray
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_explode_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_explode_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_explode_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Image.transform
  # @file                rimage.cpp
  #
  # The transform! method is used to apply a transformation to the image.
  #
  #
  # Args:
  # - transform: A Transformation object.
  #
  # Returns:
  # - image: the transformed Image object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_transform_api_example
    assert_nothing_raised do
     image = set_image "report_tool.png"
     point = Geom::Point3d.new 100,100,100
     t = Geom::Transformation.new point
     UI.messagebox "Before Move"
     image = image.transform! t
     if (image)
       UI.messagebox image
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_transform_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_transform_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_transform_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Image.height=
  # @file                rimage.cpp
  #
  # The height= method is used to set the height of the image.
  #
  # The height is given in inches.
  #
  #
  # Args:
  # - height: The height, in inches. to set the image.
  #
  # Returns:
  # - height: the new height if successful
  #

  # Test the example code that we have in the API documentation.
  def test_set_height_api_example
    assert_nothing_raised do
     image = set_image "report_tool.png"
     UI.messagebox "Before adjustment"
     height = image.height = 400
     if (height)
       UI.messagebox height
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_height_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_height_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_height_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Image.width=
  # @file                rimage.cpp
  #
  # The width= method is used to set the width of the image.
  #
  # The width is given in inches.
  #
  #
  # Args:
  # - width: The width, in inches. to set the image.
  #
  # Returns:
  # - width: the new width if successful
  #

  # Test the example code that we have in the API documentation.
  def test_set_width_api_example
    assert_nothing_raised do
     image = set_image "report_tool.png"
     UI.messagebox "Before adjustment"
     width = image.width=400
     if (width)
       UI.messagebox width
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_width_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_width_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_width_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Image.normal
  # @file                rimage.cpp
  #
  # The normal method is used to retrieve the 3d Vector that is
  # perpendicular to the plane of the image.
  #
  #
  # Args:
  #
  # Returns:
  # - vector: a Vector3d object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_normal_api_example
    assert_nothing_raised do
     image = set_image "report_tool.png"
     vector = image.normal
     if (vector)
       UI.messagebox vector
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_normal_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_normal_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_normal_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Image.origin=
  # @file                rimage.cpp
  #
  # The origin= method is used to set the 3d point as the origin of the
  # image.
  #
  #
  # Args:
  # - point: A Point3d object with the new origin.
  #
  # Returns:
  # - point: the Point3d object representing the newly
  # established origin if successful
  #

  # Test the example code that we have in the API documentation.
  def test_set_origin_api_example
    assert_nothing_raised do
     image= set_image "report_tool.png"
     pt2 = Geom::Point3d.new 100,100,100
     UI.messagebox "Before Move"
     origin = image.origin=pt2
     if (origin)
       UI.messagebox origin
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_origin_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_origin_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_origin_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Image.height
  # @file                rimage.cpp
  #
  # The height method is used to retrieve the height of the image.
  #
  # The height is given in inches.
  #
  #
  # Args:
  #
  # Returns:
  # - height: the height of the model if successful
  #

  # Test the example code that we have in the API documentation.
  def test_height_api_example
    assert_nothing_raised do
     image = set_image "report_tool.png"
     height = image.height
     if (height)
       UI.messagebox height
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_height_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_height_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_height_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Image.zrotation
  # @file                rimage.cpp
  #
  # The zrotation method is used to get the angle that the image is
  # rotated about the normal vector from an arbitrary X axis.
  #
  #
  # Args:
  #
  # Returns:
  # - vector: a Vector3d object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_zrotation_api_example
    assert_nothing_raised do
     image = set_image "report_tool.png"
     zrotation = image.zrotation
     if (zrotation)
       UI.messagebox zrotation
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_zrotation_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_zrotation_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_zrotation_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Image.path
  # @file                rimage.cpp
  #
  # The path method is used to retrieve the path of the file defining the
  # image.
  #
  #
  # Args:
  #
  # Returns:
  # - path: the path for the image file if successful
  #

  # Test the example code that we have in the API documentation.
  def test_path_api_example
    assert_nothing_raised do
     image = set_image "report_tool.png"
     path = image.path
     if (path)
       UI.messagebox path
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_path_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_path_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_path_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Image.origin
  # @file                rimage.cpp
  #
  # The origin method is used to retrieve the 3d point that defines the
  # origin of the image.
  #
  #
  # Args:
  #
  # Returns:
  # - point: a Point3d object containing the origin location
  # if successful
  #

  # Test the example code that we have in the API documentation.
  def test_origin_api_example
    assert_nothing_raised do
     image = set_image "report_tool.png"
     origin = image.origin
     if (origin)
       UI.messagebox origin
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_origin_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_origin_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_origin_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Image.pixelheight
  # @file                rimage.cpp
  #
  # The pixelheight method is used to retrieve the height of the image
  # file in pixels.
  #
  #
  # Args:
  #
  # Returns:
  # - height: the height of the image in pixels if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_pixelheight_api_example
    assert_nothing_raised do
     image = set_image "report_tool.png"
     pixelheight = image.pixelheight
     if (pixelheight)
       UI.messagebox pixelheight
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_pixelheight_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_pixelheight_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_pixelheight_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Image.pixelwidth
  # @file                rimage.cpp
  #
  # The pixelwidth method is used to retrieve the width of the image file
  # in pixels.
  #
  #
  # Args:
  #
  # Returns:
  # - width: the width of the image in pixels if successful
  #

  # Test the example code that we have in the API documentation.
  def test_pixelwidth_api_example
    assert_nothing_raised do
     image = set_image "report_tool.png"
     pixelwidth = image.pixelwidth
     if (pixelwidth)
       UI.messagebox pixelwidth
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_pixelwidth_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_pixelwidth_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_pixelwidth_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
   # @par Ruby Method:    Image.transform!
   # @file                rimage.cpp
   #
   # The transform! method is used to apply a transformation to the image.
   #
   #
   # Args:
   # - transform: A Transformation object.
   #
   # Returns:
   # - image: the transformed Image object if successful.
   #

   # Test the example code that we have in the API documentation.
   def test_transform_inplace_api_example
     assert_nothing_raised do
       image = set_image "report_tool.png"
       point = Geom::Point3d.new 100,100,100
       t = Geom::Transformation.new point
       UI.messagebox "Before Move"
       image = image.transform! t
       if (image)
         UI.messagebox image
       else
         UI.messagebox "Failure"
       end
     end
   end

   def test_transform_inplace_edgecases
     image = set_image "report_tool.png"
     point = Geom::Point3d.new 0,0,0
     t = Geom::Transformation.new point
     UI.messagebox "Before Move"
     image = image.transform! t
     assert_not_nil(image)
   end

   def test_transform_inplace_bad_params
     image = set_image "report_tool.png"
     UI.messagebox "Before Move"
     assert_raise(TypeError) do
       image = image.transform! "bad params"
     end
   end
end
